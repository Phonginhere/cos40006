# Functional User Story (a.k.a requirement) Conflict Detection Technique (proposed by Chentouf et al.)

This document summarizes the conflict identification technique for functional user stories as proposed by Chentouf and colleagues. It focuses on detecting logical contradictions and incompatible requirements between pairs of functional user stories within system requirements engineering.

===============================
## Definition of Conflict
===============================

Two functional user stories are said to **conflict** if they **contradict** one another — that is:

→ They impose **opposite expectations** on the system's behavior  
→ They **cannot be satisfied at the same time** under the same conditions  

**Definition of “contradict”:**  
Two functional user stories contradict if their goals or constraints are **clearly incompatible** in a way that would be **immediately obvious** to an informed reader (e.g., an undergraduate student who understands the ALFRED system). The contradiction should not require deep domain knowledge or subtle reasoning.

===============================
## Overview
===============================

Functional user story conflicts arise when two or more requirements specify contradictory or mutually exclusive system behaviors. Detecting such conflicts early helps avoid ambiguous, unsafe, or inconsistent system functionality.

The Chentouf technique categorizes functional user story conflicts into four primary types:

---

## 1. Start-Forbid Conflict

This conflict occurs when two requirements provide opposing instructions for the same triggering event and operation:

- **Basic form:**

  - **Event:** E  
  - **Operation:** O  

  - **Requirement A:** "When event E happens, do operation O."  
  - **Requirement B:** "When event E happens, do NOT do operation O."

- **Variant form:**

  - **Event:** E  
  - **Operation A:** Oa  
  - **Operation B:** Ob  
  - Where Oa ≠ Ob (operations are very inconsistent and conflicting)

  - **Requirement A:** "When event E happens, do operation Oa."  
  - **Requirement B:** "When event E happens, do operation Ob."

### Resolution Strategies

- **Contextual Policy Layer:** Implement a context-aware rule engine to dynamically enforce or relax constraints (e.g., allow startup only under non-restricted conditions).
- **Fallback Mechanisms:** Allow forbidden operation to occur only with explicit override or in emergency contexts.

### Unreal Example

- Requirement A: "When the system starts, initialize logging."
- Requirement B: "When the system starts, do NOT initialize logging."

Resolution: Use a context-aware policy that disables logging initialization only if the system is in maintenance mode, otherwise allow it.

---

## 2. Forbid-Stop Conflict

This type arises when one requirement mandates performing an operation under certain conditions, while another strictly forbids that operation in all contexts:

- **Condition:** C  
- **Operation:** O  

- **Requirement A:** "Do operation O when condition C happens."  
- **Requirement B:** "Strictly do NOT do operation O under any circumstances, including when condition C happens."

### Resolution Strategies

- **Clarify Priority via Risk Assessment:** Choose action based on which outcome causes less harm (e.g., stopping vs. forbidding logging).
- **Use Redundant Pathways:** Allow alternative ways to achieve goals if one method is forbidden.

### Unreal Example

- Requirement A: "Send alert emails when CPU usage exceeds 90%."
- Requirement B: "Never send alert emails to reduce noise."

Resolution: Perform risk analysis; if alerts are critical, prefer sending alerts but offer alternative notifications (e.g., dashboard messages).

---

## 3. Two Condition Events Conflict

Here, two requirements specify mutually exclusive or different triggering conditions for the same operation:

- **Operation:** O  
- **Event A:** Ea  
- **Event B:** Eb  
- Where Ea ≠ Eb (events are very inconsistent or conflicting)

- **Requirement A:** "When performing operation O, event Ea must occur."  
- **Requirement B:** "When performing operation O, event Eb must occur."

### Resolution Strategies

- **Merge Conditions via Logical Operators:** Use composite logic (e.g., (A OR B) or (A AND NOT B)) to unify triggers.
- **Separate Feature Execution Paths:** Execute features independently based on exclusive conditions.

### Unreal Example

- Requirement A: "When a file is saved, validate its checksum."
- Requirement B: "When a file is saved, skip checksum validation if the file is trusted."

Resolution: Merge conditions so that checksum validation runs if (file saved AND NOT trusted) else skip.

---

## 4. Two Operation Frequencies Conflict

This conflict involves disagreement on how frequently an agent should perform an operation on a given object:

- **Agent:** Ag  
- **Object:** Obj  
- **Operation:** O  
- **Frequency A:** Fa  
- **Frequency B:** Fb  

- **Requirement A:** "Agent Ag performs operation O on object Obj every Fa."  
- **Requirement B:** "Agent Ag performs operation O on object Obj every Fb."

### Resolution Strategies

- **Negotiate Middle Ground:** Choose an optimal frequency via LLM-backed simulation or stakeholder negotiation (e.g., 10 min if 5 and 15 are requested).
- **Make Frequency Configurable:** Allow end-user configuration (especially for developers or caregivers).

### Unreal Example

- Requirement A: "Backup database every 5 minutes."
- Requirement B: "Backup database every 15 minutes to reduce resource usage."

Resolution: Default to 10 minutes, and provide configuration options to adjust backup frequency.

---

## Purpose and Use

By applying this technique, requirement analysts can systematically identify and classify conflicts between functional user stories during requirement elicitation or refinement. This improves requirement quality and guides conflict resolution strategies to produce consistent and implementable system specifications.

---

## Notes

- These conflict types focus on mutually exclusive or logically incompatible conditions or operations.
- Detection typically involves pairwise comparison of functional user stories focusing on event triggers, operations, conditions, and timing/frequency aspects.
- Automated detection may leverage formal rule checking, semantic analysis, or natural language processing aided by domain knowledge.

---

This summary serves as a reference for analysts and tools engaged in functional user story conflict analysis within the ALFRED system requirements engineering pipeline. Note that, the above examples are just the just non-existent ones, which are used for references only, and do not confuse with the real inputs provided (personas, summaries, ...):
